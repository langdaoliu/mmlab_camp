{"env_info": "sys.platform: win32\nPython: 3.8.16 (default, Jan 17 2023, 22:25:28) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\nNVCC: Cuda compilation tools, release 11.4, V11.4.48\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.30.30705 \u7248\nGCC: n/a\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        'F:\\workspace\\mmlab\\camp\\02basic\\balloon_dataset\\balloon\\train/annotation_coco.json',\n        img_prefix=\n        'F:\\workspace\\mmlab\\camp\\02basic\\balloon_dataset\\balloon\\train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        'F:\\workspace\\mmlab\\camp\\02basic\\balloon_dataset\\balloon\\val/annotation_coco.json',\n        img_prefix=\n        'F:\\workspace\\mmlab\\camp\\02basic\\balloon_dataset\\balloon\\val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        'F:\\workspace\\mmlab\\camp\\02basic\\balloon_dataset\\balloon\\val/annotation_coco.json',\n        img_prefix=\n        'F:\\workspace\\mmlab\\camp\\02basic\\balloon_dataset\\balloon\\val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './/pretrain/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs\\ballon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 587530903, "exp_name": "ballon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.1368, "bbox_mAP_50": 0.2454, "bbox_mAP_75": 0.1221, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1437, "bbox_mAP_l": 0.1733, "bbox_mAP_copypaste": "0.1368 0.2454 0.1221 0.0000 0.1437 0.1733", "segm_mAP": 0.1665, "segm_mAP_50": 0.24, "segm_mAP_75": 0.2101, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0396, "segm_mAP_l": 0.2351, "segm_mAP_copypaste": "0.1665 0.2400 0.2101 0.0000 0.0396 0.2351"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.4466, "bbox_mAP_50": 0.6027, "bbox_mAP_75": 0.5398, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1529, "bbox_mAP_l": 0.5644, "bbox_mAP_copypaste": "0.4466 0.6027 0.5398 0.0000 0.1529 0.5644", "segm_mAP": 0.5234, "segm_mAP_50": 0.6004, "segm_mAP_75": 0.592, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1105, "segm_mAP_l": 0.6691, "segm_mAP_copypaste": "0.5234 0.6004 0.5920 0.0000 0.1105 0.6691"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.516, "bbox_mAP_50": 0.7114, "bbox_mAP_75": 0.6522, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3411, "bbox_mAP_l": 0.6052, "bbox_mAP_copypaste": "0.5160 0.7114 0.6522 0.0000 0.3411 0.6052", "segm_mAP": 0.5831, "segm_mAP_50": 0.7114, "segm_mAP_75": 0.6922, "segm_mAP_s": 0.0, "segm_mAP_m": 0.2512, "segm_mAP_l": 0.701, "segm_mAP_copypaste": "0.5831 0.7114 0.6922 0.0000 0.2512 0.7010"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.6207, "bbox_mAP_50": 0.8327, "bbox_mAP_75": 0.767, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4068, "bbox_mAP_l": 0.701, "bbox_mAP_copypaste": "0.6207 0.8327 0.7670 0.0000 0.4068 0.7010", "segm_mAP": 0.7131, "segm_mAP_50": 0.82, "segm_mAP_75": 0.82, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4741, "segm_mAP_l": 0.8014, "segm_mAP_copypaste": "0.7131 0.8200 0.8200 0.0000 0.4741 0.8014"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.6945, "bbox_mAP_50": 0.8626, "bbox_mAP_75": 0.8427, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5967, "bbox_mAP_l": 0.7514, "bbox_mAP_copypaste": "0.6945 0.8626 0.8427 0.0000 0.5967 0.7514", "segm_mAP": 0.7602, "segm_mAP_50": 0.855, "segm_mAP_75": 0.8434, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6078, "segm_mAP_l": 0.8304, "segm_mAP_copypaste": "0.7602 0.8550 0.8434 0.0000 0.6078 0.8304"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.6754, "bbox_mAP_50": 0.8415, "bbox_mAP_75": 0.8119, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4661, "bbox_mAP_l": 0.75, "bbox_mAP_copypaste": "0.6754 0.8415 0.8119 0.0000 0.4661 0.7500", "segm_mAP": 0.7327, "segm_mAP_50": 0.8238, "segm_mAP_75": 0.8238, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4256, "segm_mAP_l": 0.8303, "segm_mAP_copypaste": "0.7327 0.8238 0.8238 0.0000 0.4256 0.8303"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.694, "bbox_mAP_50": 0.8494, "bbox_mAP_75": 0.8289, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.524, "bbox_mAP_l": 0.7815, "bbox_mAP_copypaste": "0.6940 0.8494 0.8289 0.0000 0.5240 0.7815", "segm_mAP": 0.7535, "segm_mAP_50": 0.8645, "segm_mAP_75": 0.828, "segm_mAP_s": 0.101, "segm_mAP_m": 0.5703, "segm_mAP_l": 0.8397, "segm_mAP_copypaste": "0.7535 0.8645 0.8280 0.1010 0.5703 0.8397"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.606, "bbox_mAP_50": 0.8152, "bbox_mAP_75": 0.7645, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4157, "bbox_mAP_l": 0.6936, "bbox_mAP_copypaste": "0.6060 0.8152 0.7645 0.0000 0.4157 0.6936", "segm_mAP": 0.6909, "segm_mAP_50": 0.8151, "segm_mAP_75": 0.7894, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.4603, "segm_mAP_l": 0.7855, "segm_mAP_copypaste": "0.6909 0.8151 0.7894 0.0168 0.4603 0.7855"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.668, "bbox_mAP_50": 0.8126, "bbox_mAP_75": 0.7676, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5131, "bbox_mAP_l": 0.7443, "bbox_mAP_copypaste": "0.6680 0.8126 0.7676 0.0000 0.5131 0.7443", "segm_mAP": 0.7165, "segm_mAP_50": 0.8022, "segm_mAP_75": 0.7813, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5159, "segm_mAP_l": 0.8046, "segm_mAP_copypaste": "0.7165 0.8022 0.7813 0.0000 0.5159 0.8046"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.6956, "bbox_mAP_50": 0.8337, "bbox_mAP_75": 0.8337, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.486, "bbox_mAP_l": 0.7816, "bbox_mAP_copypaste": "0.6956 0.8337 0.8337 0.0000 0.4860 0.7816", "segm_mAP": 0.7395, "segm_mAP_50": 0.8337, "segm_mAP_75": 0.8105, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4912, "segm_mAP_l": 0.8339, "segm_mAP_copypaste": "0.7395 0.8337 0.8105 0.0000 0.4912 0.8339"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.6995, "bbox_mAP_50": 0.8158, "bbox_mAP_75": 0.8158, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4448, "bbox_mAP_l": 0.8145, "bbox_mAP_copypaste": "0.6995 0.8158 0.8158 0.0000 0.4448 0.8145", "segm_mAP": 0.73, "segm_mAP_50": 0.8158, "segm_mAP_75": 0.794, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4289, "segm_mAP_l": 0.8545, "segm_mAP_copypaste": "0.7300 0.8158 0.7940 0.0000 0.4289 0.8545"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.6893, "bbox_mAP_50": 0.8123, "bbox_mAP_75": 0.8123, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4338, "bbox_mAP_l": 0.8037, "bbox_mAP_copypaste": "0.6893 0.8123 0.8123 0.0000 0.4338 0.8037", "segm_mAP": 0.7228, "segm_mAP_50": 0.8123, "segm_mAP_75": 0.7904, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4284, "segm_mAP_l": 0.8469, "segm_mAP_copypaste": "0.7228 0.8123 0.7904 0.0000 0.4284 0.8469"}
